module SimpleCPU_tb;

    // Testbench Signals
    reg clk;
    reg reset;
    wire [31:0] pc;

    // Instantiate the CPU
    SimpleCPU cpu (
        .clk(clk),
        .reset(reset),
        .pc(pc)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10 time units clock period
    end

    // Reset and initialization
    initial begin
        reset = 1;
        #15 reset = 0; // Release reset after 15 time units
    end

    // Instruction Memory Initialization
    initial begin
        
        // Store some initial values in the register file
        cpu.regfile[2] = 32'h00000005; // R2 = 5
        cpu.regfile[3] = 32'h00000003; // R3 = 3
        cpu.regfile[5] = 32'h00000002; // R5 = 2
        cpu.regfile[7] = 32'h00000004; // R7 = 4

        // Instructions
        cpu.imem[0] = 32'b000000_00010_00011_00001_00000_100000; // ADD R1, R2, R3
        cpu.imem[1] = 32'b000000_00001_00101_00100_00000_100010; // SUB R4, R1, R5
        cpu.imem[2] = 32'b000000_00100_00111_00110_00000_011000; // MUL R6, R4, R7

        // Let the CPU run for 50 clock cycles
        #100 $finish;
    end

    // Monitor the CPU state
    initial begin
        $monitor("Time: %0d, PC: %h, R1: %h, R4: %h, R6: %h", $time, pc, cpu.regfile[1], cpu.regfile[4], cpu.regfile[6]);
    end

endmodule
